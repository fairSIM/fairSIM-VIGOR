/*
This file is part of Free Analysis and Interactive Reconstruction
for Structured Illumination Microscopy (fairSIM).

fairSIM is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

fairSIM is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with fairSIM.  If not, see <http://www.gnu.org/licenses/>
 */
package org.fairsim.controller;

import java.io.FileNotFoundException;
import org.fairsim.livemode.ReconstructionRunner;
import org.fairsim.livemode.SimSequenceExtractor;
import org.fairsim.registration.RegFileCreatorGui;
import org.fairsim.registration.Registration;
import org.fairsim.utils.Conf;
import org.fairsim.utils.Tool;

/**
 * gui for the image registration
 * @author m.lachetta
 */
public class RegistrationPanel extends javax.swing.JPanel implements EasyGui.Reg {
    String regFolder;
    String[] channelNames;
    SimSequenceExtractor seqDetection;
    ReconstructionRunner recRunner;
    
    /**
     * Creates new form RegistrationPanel
     */
    public RegistrationPanel() {
        initComponents();
    }
    
    /**
     * enables this panel
     * @param cfg config folder to get registration folder
     * @param channelNames array of channels
     * @param seqDetection the sequence extractor
     * @param recRunner the reconstruction runner
     */
    void enablePanel(Conf.Folder cfg, String[] channelNames, SimSequenceExtractor seqDetection, ReconstructionRunner recRunner) {
        this.channelNames = channelNames;
        this.seqDetection = seqDetection;
        this.recRunner = recRunner;
        // checks for all necessary classes and activates this panel
        try {
            regFolder = Registration.getRegFolder(cfg);
            Class.forName("ij.ImagePlus");
            Class.forName("ij.process.ImageProcessor");
            Class.forName("bunwarpj.Transformation");
            Class.forName("bunwarpj.bUnwarpJ_");
        } catch (FileNotFoundException ex) {
            this.setEnabled(false);
            regReconButton.setEnabled(false);
            regWfButton.setEnabled(false);
            regCreatorButton.setEnabled(false);
            Tool.error("[fairSIM] " + ex.getMessage(), false);
        } catch (ClassNotFoundException ex) {
            regCreatorButton.setEnabled(false);
            Tool.error("[fairSIM] Jar files for bunwarpj and/or imagej are missing. Deaktived registration-creator.", false);
        }
        for (final String channel : channelNames) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    Registration.createRegistration(regFolder, channel);
                }
            }).start();
        }
    }
    
    @Override
    public void register(boolean b) {
        if (b != regWfButton.isSelected()) regWfButton.doClick();
        if (b != regReconButton.isSelected()) regReconButton.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        regWfButton = new javax.swing.JToggleButton();
        regReconButton = new javax.swing.JToggleButton();
        regCreatorButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Registration"));

        regWfButton.setText("Register In Widefield");
        regWfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regWfButtonActionPerformed(evt);
            }
        });

        regReconButton.setText("Register In Reconstruction");
        regReconButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regReconButtonActionPerformed(evt);
            }
        });

        regCreatorButton.setText("Create Registration File");
        regCreatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regCreatorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(regCreatorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regReconButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(regWfButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regWfButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regReconButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regCreatorButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void regWfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regWfButtonActionPerformed
        Registration.setWidefield(regWfButton.isSelected());
    }//GEN-LAST:event_regWfButtonActionPerformed

    private void regReconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regReconButtonActionPerformed
        Registration.setRecon(regReconButton.isSelected());
    }//GEN-LAST:event_regReconButtonActionPerformed

    private void regCreatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regCreatorButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegFileCreatorGui(regFolder, channelNames, seqDetection, recRunner, regWfButton, regReconButton).setVisible(true);
            }
        });
    }//GEN-LAST:event_regCreatorButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton regCreatorButton;
    private javax.swing.JToggleButton regReconButton;
    private javax.swing.JToggleButton regWfButton;
    // End of variables declaration//GEN-END:variables
}
